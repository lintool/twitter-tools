<project name="twitter-tools" default="scripts"
         xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant" basedir=".">
  <description>Twitter tools for researchers</description>

  <property name="lib.dir" value="lib" />
  <property name="build.dir" value="build"/>
  <property name="src.dir" value="src"/>
  <property name="dist.dir" value="dist"/>
  <property name="test.dir" location="test" />
  <property name="javadoc.dir" location="docs/api/" />

  <property name="version" value="1.1.1"/>

  <!-- paths used for compilation and run  -->
  <path id="lib.path.id">
    <fileset dir="${lib.dir}" />
  </path>
  <path id="run.path.id">
    <path refid="lib.path.id" />
    <fileset dir="${dist.dir}" />
  </path>

  <property name="ivy.install.version" value="2.2.0"/>
  <property name="ivy.jar.dir" value="${basedir}/ivy"/>
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
  <property name="ivy.settings.file" value="${basedir}/ivy/ivysettings.xml" />
  <property name="ivy.dep.file" value="${basedir}/ivy/ivy.xml" />

  <property name="maven.ant.task.version" value="2.1.2"/>
  <property name="maven.jar.dir" value="${basedir}/${lib.dir}"/>
  <property name="maven.jar.file" value="${maven.jar.dir}/maven.jar"/>

  <!-- define Maven coordinates, repository url and artifacts name etc -->
  <property name="groupId" value="cc.twittertools" />
  <property name="artifactId" value="twitter-tools" />
  <property name="version" value="${version}" />

  <property name="maven-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2" />
  <property name="maven-repository-id" value="sonatype-nexus-staging" />
  <property name="maven-jar" value="${dist.dir}/${artifactId}-${version}.jar" />
  <property name="maven-javadoc-jar" value="${dist.dir}/${artifactId}-${version}-javadoc.jar" />
  <property name="maven-sources-jar" value="${dist.dir}/${artifactId}-${version}-sources.jar" />

  <target name="init">
    <tstamp />
    <condition property="platform" value="unix"><os family="unix" /></condition>
    <condition property="platform" value="unix"><os family="mac" /></condition>
    <condition property="platform" value="windows"><os family="windows" /></condition>
    <mkdir dir="${build.dir}" />
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${dist.dir}" />
  </target>

  <!-- download Ivy from web site so that it can be used even without any special installation -->
  <target name="download-ivy" unless="skip.download">
    <echo message="installing ivy..."/>
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
         dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <!-- try to load ivy here from local ivy dir, in case the user has not already dropped
       it into ant's lib dir (note that the latter copy will always take precedence).
       We will not fail as long as local lib dir exists (it may be empty) and
       ivy is in at least one of ant's lib dir or the local lib dir. -->
  <target name="install-ivy" depends="download-ivy" description="--> install ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>

  <target name="resolve" depends="install-ivy" description="--> retreive dependencies with ivy">
    <ivy:retrieve/>
  </target>

  <target name="report" depends="resolve" description="--> generates a report of dependencies">
      <ivy:report todir="${build.dir}"/>
  </target>

  <!-- download maven from web site so that it can be used even without any special installation -->
  <target name="download-maven" depends="init" unless="skip.download">
    <mkdir dir="${maven.jar.dir}"/>
    <echo message="installing maven ant tasks..."/>
    <get src="http://repo1.maven.org/maven2/org/apache/maven/maven-ant-tasks/${maven.ant.task.version}/maven-ant-tasks-${maven.ant.task.version}.jar"
         dest="${maven.jar.file}" usetimestamp="true"/>
  </target>

  <target name="install-maven" depends="download-maven" description="--> install ivy">
    <path id="maven.lib.path">
      <fileset dir="${maven.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef uri="antlib:org.apache.maven.artifact.ant" classpathref="maven.lib.path"/>
  </target>

  <target name="compile" depends="init,resolve" description="compile the source ">
    <javac classpathref="lib.path.id" srcdir="${src.dir}/gen/java" destdir="${build.dir}" optimize="on" debug="on"/>
    <javac classpathref="lib.path.id" srcdir="${src.dir}/main/java" destdir="${build.dir}" optimize="on" debug="on">
      <compilerarg value="-Xlint:unchecked" />
    </javac>
    <javac classpathref="lib.path.id" srcdir="${src.dir}/test/java" destdir="${build.dir}" optimize="on" debug="on">
      <compilerarg value="-Xlint:unchecked" />
    </javac>
    <copy todir="${build.dir}">
      <fileset dir="${src.dir}/main/java" excludes="**/*.java" />
      <fileset dir="${src.dir}/test/java" excludes="**/*.java" />
      <fileset dir="${src.dir}/gen/java" excludes="**/*.java" />
    </copy>
  </target>

  <target name="jar" depends="compile" description="generate the distribution">
    <jar jarfile="${dist.dir}/twitter-tools-${version}.jar" basedir="${build.dir}" />
  </target>

  <target name="dist" depends="jar,javadoc" description="generate the distribution">
    <jar jarfile="${dist.dir}/twitter-tools-${version}-sources.jar" basedir="${src.dir}" />
    <jar jarfile="${dist.dir}/twitter-tools-${version}-javadoc.jar" basedir="${javadoc.dir}" />
  </target>

  <target name="clean" description="clean up">
    <delete dir="${test.dir}" />
    <delete dir="${build.dir}" />
    <delete dir="${lib.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="${javadoc.dir}" />
  </target>

  <target name="test" depends="jar" description="Execute Unit Tests">
    <mkdir dir="${test.dir}" />
    <junit printsummary="yes" fork="yes" maxmemory="1024m">
      <sysproperty key="java.library.path" path="${lib.dir}" />
      <sysproperty key="org.xml.sax.driver" value="org.apache.xerces.parsers.SAXParser" />
      <classpath refid="run.path.id" />

      <formatter type="xml" />
        <batchtest todir="${test.dir}">
          <fileset dir="${build.dir}">
            <include name="**/*Test.class" />
          </fileset>
        </batchtest>
    </junit>
    <junitreport todir="${test.dir}">
      <fileset dir="${test.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="noframes" styledir="etc/" todir="${test.dir}" />
    </junitreport>
  </target>

  <target name="javadoc">
    <javadoc destdir="${javadoc.dir}" access="public" use="true" notree="false" nonavbar="false" noindex="false" splitindex="no" author="true" version="true" nodeprecatedlist="false" nodeprecated="false" classpathref="lib.path.id">
      <fileset dir="src/main/java">
        <include name="**/*.java" />
      </fileset>
      <link href="http://java.sun.com/javase/6/docs/api/" />
    </javadoc>
    <copy todir="${javadoc.dir}">
       <fileset dir="${src.dir}/main/java">
      </fileset>
    </copy>
  </target>

  <target name="scripts" depends="jar">
    <pathconvert property="run.path.id" refid="run.path.id" targetos="${platform}" />
    <pathconvert property="lib.path.id" refid="lib.path.id" targetos="${platform}" />

    <property name="suffix" value="sh" />
    <property name="param_prefix" value="$" />
    <property name="cp_sep" value=":" />
    <property name="java_command" value="java -Xmx4g -classpath &quot;${run.path.id}&quot;" />
    <property name="script_prefix" value="#!/bin/sh${line.separator}" />

    <echo file="./etc/run.${suffix}" message="${script_prefix}" />
    <echo file="./etc/run.${suffix}" message="${java_command} " append="true" />
    <echo file="./etc/run.${suffix}" message="&quot;${param_prefix}1&quot; &quot;${param_prefix}2&quot; &quot;${param_prefix}3&quot; &quot;${param_prefix}4&quot; &quot;${param_prefix}5&quot; &quot;${param_prefix}6&quot; &quot;${param_prefix}7&quot; &quot;${param_prefix}8&quot; &quot;${param_prefix}9&quot; &quot;${param_prefix}{10}&quot; &quot;${param_prefix}{11}&quot; &quot;${param_prefix}{12}&quot; &quot;${param_prefix}{13}&quot; &quot;${param_prefix}{14}&quot; &quot;${param_prefix}{15}&quot;${line.separator}" append="true" />

     <chmod dir="./etc/" perm="ugo+rx" includes="**/*.sh"/>
  </target>

  <target name="gen-pom" depends="install-ivy">
    <ivy:makepom ivyfile="ivy/ivy.xml" pomfile="twittertools.pom" />
  </target>

  <target name="publish-local" depends="jar" description="publish jar/source to maven repo mounted at ~/.m2/repository">
    <ivy:publish resolver="local-m2-publish" forcedeliver="true" overwrite="true" publishivy="false">
      <artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]"/>
      <artifacts pattern="pom.xml"/>
    </ivy:publish>
  </target>

  <target name="deploy" depends="dist,install-maven" description="deploy to Nexus">
    <!-- sign and deploy the main artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.1:sign-and-deploy-file" />
      <arg value="-Durl=${maven-repository-url}" />
      <arg value="-DrepositoryId=${maven-repository-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${maven-jar}" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the sources artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.1:sign-and-deploy-file" />
      <arg value="-Durl=${maven-repository-url}" />
      <arg value="-DrepositoryId=${maven-repository-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${maven-sources-jar}" />
      <arg value="-Dclassifier=sources" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the javadoc artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.1:sign-and-deploy-file" />
      <arg value="-Durl=${maven-repository-url}" />
      <arg value="-DrepositoryId=${maven-repository-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${maven-javadoc-jar}" />
      <arg value="-Dclassifier=javadoc" />
      <arg value="-Pgpg" />
    </artifact:mvn>
  </target>

</project>
