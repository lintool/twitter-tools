#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TResult:
  """
  Attributes:
   - id
   - rsv
   - screen_name
   - epoch
   - text
   - followers_count
   - statuses_count
   - lang
   - in_reply_to_status_id
   - in_reply_to_user_id
   - retweeted_status_id
   - retweeted_user_id
   - retweeted_count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.DOUBLE, 'rsv', None, None, ), # 2
    (3, TType.STRING, 'screen_name', None, None, ), # 3
    (4, TType.I64, 'epoch', None, None, ), # 4
    (5, TType.STRING, 'text', None, None, ), # 5
    (6, TType.I32, 'followers_count', None, None, ), # 6
    (7, TType.I32, 'statuses_count', None, None, ), # 7
    (8, TType.STRING, 'lang', None, None, ), # 8
    (9, TType.I64, 'in_reply_to_status_id', None, None, ), # 9
    (10, TType.I64, 'in_reply_to_user_id', None, None, ), # 10
    (11, TType.I64, 'retweeted_status_id', None, None, ), # 11
    (12, TType.I64, 'retweeted_user_id', None, None, ), # 12
    (13, TType.I32, 'retweeted_count', None, None, ), # 13
  )

  def __init__(self, id=None, rsv=None, screen_name=None, epoch=None, text=None, followers_count=None, statuses_count=None, lang=None, in_reply_to_status_id=None, in_reply_to_user_id=None, retweeted_status_id=None, retweeted_user_id=None, retweeted_count=None,):
    self.id = id
    self.rsv = rsv
    self.screen_name = screen_name
    self.epoch = epoch
    self.text = text
    self.followers_count = followers_count
    self.statuses_count = statuses_count
    self.lang = lang
    self.in_reply_to_status_id = in_reply_to_status_id
    self.in_reply_to_user_id = in_reply_to_user_id
    self.retweeted_status_id = retweeted_status_id
    self.retweeted_user_id = retweeted_user_id
    self.retweeted_count = retweeted_count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.rsv = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.screen_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.epoch = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.followers_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.statuses_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.lang = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.in_reply_to_status_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.in_reply_to_user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.retweeted_status_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.retweeted_user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.retweeted_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TResult')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.rsv is not None:
      oprot.writeFieldBegin('rsv', TType.DOUBLE, 2)
      oprot.writeDouble(self.rsv)
      oprot.writeFieldEnd()
    if self.screen_name is not None:
      oprot.writeFieldBegin('screen_name', TType.STRING, 3)
      oprot.writeString(self.screen_name)
      oprot.writeFieldEnd()
    if self.epoch is not None:
      oprot.writeFieldBegin('epoch', TType.I64, 4)
      oprot.writeI64(self.epoch)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 5)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.followers_count is not None:
      oprot.writeFieldBegin('followers_count', TType.I32, 6)
      oprot.writeI32(self.followers_count)
      oprot.writeFieldEnd()
    if self.statuses_count is not None:
      oprot.writeFieldBegin('statuses_count', TType.I32, 7)
      oprot.writeI32(self.statuses_count)
      oprot.writeFieldEnd()
    if self.lang is not None:
      oprot.writeFieldBegin('lang', TType.STRING, 8)
      oprot.writeString(self.lang)
      oprot.writeFieldEnd()
    if self.in_reply_to_status_id is not None:
      oprot.writeFieldBegin('in_reply_to_status_id', TType.I64, 9)
      oprot.writeI64(self.in_reply_to_status_id)
      oprot.writeFieldEnd()
    if self.in_reply_to_user_id is not None:
      oprot.writeFieldBegin('in_reply_to_user_id', TType.I64, 10)
      oprot.writeI64(self.in_reply_to_user_id)
      oprot.writeFieldEnd()
    if self.retweeted_status_id is not None:
      oprot.writeFieldBegin('retweeted_status_id', TType.I64, 11)
      oprot.writeI64(self.retweeted_status_id)
      oprot.writeFieldEnd()
    if self.retweeted_user_id is not None:
      oprot.writeFieldBegin('retweeted_user_id', TType.I64, 12)
      oprot.writeI64(self.retweeted_user_id)
      oprot.writeFieldEnd()
    if self.retweeted_count is not None:
      oprot.writeFieldBegin('retweeted_count', TType.I32, 13)
      oprot.writeI32(self.retweeted_count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TQuery:
  """
  Attributes:
   - group
   - token
   - text
   - max_id
   - num_results
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'group', None, None, ), # 1
    (2, TType.STRING, 'token', None, None, ), # 2
    (3, TType.STRING, 'text', None, None, ), # 3
    (4, TType.I64, 'max_id', None, None, ), # 4
    (5, TType.I32, 'num_results', None, None, ), # 5
  )

  def __init__(self, group=None, token=None, text=None, max_id=None, num_results=None,):
    self.group = group
    self.token = token
    self.text = text
    self.max_id = max_id
    self.num_results = num_results

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.group = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.max_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.num_results = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TQuery')
    if self.group is not None:
      oprot.writeFieldBegin('group', TType.STRING, 1)
      oprot.writeString(self.group)
      oprot.writeFieldEnd()
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 2)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 3)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.max_id is not None:
      oprot.writeFieldBegin('max_id', TType.I64, 4)
      oprot.writeI64(self.max_id)
      oprot.writeFieldEnd()
    if self.num_results is not None:
      oprot.writeFieldBegin('num_results', TType.I32, 5)
      oprot.writeI32(self.num_results)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TrecSearchException(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TrecSearchException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
